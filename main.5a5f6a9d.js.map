{"version":3,"sources":["scripts/main.js"],"names":["score","document","querySelector","button","cells","startGameText","loseGameText","winGameText","numOfCells","scoreCount","gameField","hasEmptyTile","r","includes","setRandom","randomRow","Math","floor","random","randomCol","numb","setCells","startPlay","innerText","loseGame","c","currentCell","rows","num","classList","value","add","remove","replace","addArrowKeyListener","addEventListener","handleArrowKey","e","preventDefault","code","canSlideLeft","slideLeft","canSlideRight","slideRight","canSlideUp","slideUp","canSlideDown","slideDown","i","v","checkZero","row","filter","slide","newRow","length","push","slice","reverse"],"mappings":"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","file":"main.5a5f6a9d.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst score = document.querySelector('.game-score');\nconst button = document.querySelector('.button');\nconst cells = document.querySelector('tbody');\nconst startGameText = document.querySelector('.message-start');\nconst loseGameText = document.querySelector('.message-lose');\nconst winGameText = document.querySelector('.message-win');\n\nconst numOfCells = 4;\nlet scoreCount = 0;\nlet gameField = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nbutton.addEventListener('click', () => {\n  button.classList.replace('start', 'restart');\n  button.innerText = 'Restart';\n  startGameText.classList.add('hidden');\n  loseGameText.classList.add('hidden');\n  winGameText.classList.add('hidden');\n\n  startPlay();\n  addArrowKeyListener();\n});\n\nfunction hasEmptyTile() {\n  for (let r = 0; r < numOfCells; r++) {\n    if (gameField[r].includes(0)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction setRandom() {\n  while (hasEmptyTile()) {\n    const randomRow = Math.floor(Math.random() * numOfCells);\n    const randomCol = Math.floor(Math.random() * numOfCells);\n\n    if (gameField[randomRow][randomCol] === 0) {\n      const numb = Math.random() < 0.9 ? 2 : 4;\n\n      gameField[randomRow][randomCol] = numb;\n      break;\n    }\n  }\n\n  setCells();\n}\n\nfunction startPlay() {\n  gameField = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  scoreCount = 0;\n  score.innerText = scoreCount;\n\n  setRandom();\n  setRandom();\n}\n\nfunction loseGame() {\n  if (hasEmptyTile()) {\n    return false;\n  }\n\n  for (let r = 0; r < numOfCells; r++) {\n    for (let c = 0; c < numOfCells - 1; c++) {\n      if (gameField[r][c] === gameField[r][c + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let r = 0; r < numOfCells - 1; r++) {\n    for (let c = 0; c < numOfCells; c++) {\n      if (gameField[r][c] === gameField[r + 1][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction setCells() {\n  for (let r = 0; r < numOfCells; r++) {\n    for (let c = 0; c < numOfCells; c++) {\n      const currentCell = cells.rows[r].cells[c];\n      const num = gameField[r][c];\n\n      currentCell.innerText = '';\n      currentCell.classList.value = '';\n      currentCell.classList.add('field-cell');\n\n      if (num > 0) {\n        currentCell.innerText = num;\n        currentCell.classList.add(`field-cell--${num}`);\n      }\n\n      if (num === 2048) {\n        winGameText.classList.remove('hidden');\n        button.classList.replace('restart', 'start');\n      }\n    }\n  }\n\n  if (loseGame()) {\n    loseGameText.classList.remove('hidden');\n  }\n}\n\nfunction addArrowKeyListener() {\n  document.addEventListener('keyup', handleArrowKey);\n}\n\nfunction handleArrowKey(e) {\n  e.preventDefault();\n\n  switch (e.code) {\n    case 'ArrowLeft':\n      if (canSlideLeft()) {\n        slideLeft();\n        setRandom();\n      }\n      break;\n\n    case 'ArrowRight':\n      if (canSlideRight()) {\n        slideRight();\n        setRandom();\n      }\n      break;\n\n    case 'ArrowUp':\n      if (canSlideUp()) {\n        slideUp();\n        setRandom();\n      }\n      break;\n\n    case 'ArrowDown':\n      if (canSlideDown()) {\n        slideDown();\n        setRandom();\n      }\n      break;\n  }\n\n  setCells();\n}\n\nfunction canSlideLeft() {\n  for (let i = 0; i < numOfCells; i++) {\n    for (let v = 1; v < numOfCells; v++) {\n      if (gameField[i][v] !== 0 && (gameField[i][v - 1] === 0\n        || gameField[i][v - 1] === gameField[i][v])) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction canSlideRight() {\n  for (let i = 0; i < numOfCells; i++) {\n    for (let v = 0; v < numOfCells - 1; v++) {\n      if (gameField[i][v] !== 0 && (gameField[i][v + 1] === 0\n        || gameField[i][v + 1] === gameField[i][v])) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction canSlideUp() {\n  for (let i = 1; i < numOfCells; i++) {\n    for (let v = 0; v < numOfCells; v++) {\n      if (gameField[i][v] !== 0 && (gameField[i - 1][v] === 0\n        || gameField[i - 1][v] === gameField[i][v])) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction canSlideDown() {\n  for (let i = 0; i < numOfCells - 1; i++) {\n    for (let v = 0; v < numOfCells; v++) {\n      if (gameField[i][v] !== 0 && (gameField[i + 1][v] === 0\n        || gameField[i + 1][v] === gameField[i][v])) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction checkZero(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction slide(row) {\n  let newRow = checkZero(row);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      scoreCount += newRow[i];\n\n      score.innerText = scoreCount;\n    }\n  }\n\n  newRow = checkZero(newRow);\n\n  while (newRow.length < numOfCells) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction slideLeft() {\n  for (let i = 0; i < numOfCells; i++) {\n    let row = gameField[i].slice();\n\n    row = slide(row);\n    gameField[i] = row;\n  }\n}\n\nfunction slideRight() {\n  for (let i = 0; i < numOfCells; i++) {\n    let row = gameField[i].slice().reverse();\n\n    row = slide(row).reverse();\n    gameField[i] = row;\n  }\n}\n\nfunction slideUp() {\n  for (let i = 0; i < numOfCells; i++) {\n    let row = [\n      gameField[0][i],\n      gameField[1][i],\n      gameField[2][i],\n      gameField[3][i],\n    ];\n\n    row = slide(row);\n\n    for (let v = 0; v < numOfCells; v++) {\n      gameField[v][i] = row[v];\n    }\n  }\n}\n\nfunction slideDown() {\n  for (let i = 0; i < numOfCells; i++) {\n    let row = [\n      gameField[0][i],\n      gameField[1][i],\n      gameField[2][i],\n      gameField[3][i],\n    ].reverse();\n\n    row = slide(row).reverse();\n\n    for (let v = 0; v < numOfCells; v++) {\n      gameField[v][i] = row[v];\n    }\n  }\n}\n"]}